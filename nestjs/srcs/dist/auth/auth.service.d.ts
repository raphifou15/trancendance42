import { PrismaService } from 'src/prisma/prisma.service';
import { AuthDto } from './dto';
import { ChangeDto } from './dto';
import { JwtService } from '@nestjs/jwt';
import { ConfigService } from '@nestjs/config';
import { HttpService } from '@nestjs/axios';
export declare class AuthService {
    private prisma;
    private jwt;
    private config;
    private readonly httpService;
    constructor(prisma: PrismaService, jwt: JwtService, config: ConfigService, httpService: HttpService);
    signup(dto: AuthDto): Promise<string>;
    signToken(userId: number, email: string): Promise<{
        access_token: string;
    }>;
    register(id: number, login: string, email: string, image_extension: string): Promise<string>;
    get_user(): Promise<-1 | {
        image_url: string;
        login: string;
        email: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
    }>;
    get_user_by_id(id: string): Promise<-1 | ({
        friends: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            login: string;
            email: string;
            email_is_ok: boolean;
            hash: string;
            image_url: string;
            gone_through_login: boolean;
            gone_through_register: boolean;
            is_online: boolean;
            auth2f_enabled: boolean;
            is_ongame: boolean;
            victories: number;
            defeats: number;
            nb_of_games: number;
        }[];
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    })>;
    toggleA2f(id: string): Promise<boolean>;
    change_image_url_from_profile(dto: ChangeDto): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }>;
    changeLogin(dto: ChangeDto): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }>;
    loginexists(login: string): Promise<boolean>;
    get_user_by_login(login: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }>;
    emailexists(email: string): Promise<boolean>;
    get_user_by_email(email: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }>;
    get_friends_by_id(id: string): Promise<-1 | {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }[]>;
    get_all_users(): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }[]>;
    toggleGoneThroughLoginTrue(id: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }>;
    toggleGoneThroughLoginFalse(id: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }>;
    toggleLogin(id: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    } | -1>;
    toggleLogout(id: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    } | -1>;
    toggleGoneThroughRegisterTrue(id: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    } | -1>;
    didUserGoThroughRegister(id: string): Promise<boolean>;
    didUserEnabledA2f(id: string): Promise<boolean>;
}
