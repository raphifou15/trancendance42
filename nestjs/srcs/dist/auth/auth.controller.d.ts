import { AuthService } from './auth.service';
import { AuthDto } from './dto';
import { ChangeDto } from './dto';
import { EmailConfirmationService } from './twofactor/emailConfirmation.service';
import { Response } from 'express';
import { JwtService } from '@nestjs/jwt';
import { UserService } from '../user/user.service';
import { PrismaService } from 'src/prisma/prisma.service';
import { HttpService } from '@nestjs/axios';
export declare const userIdToken: Map<number, string>;
export declare function findUserIdToken(id: number): string | undefined;
export declare function addUserIdToken(token: {
    key: number;
    value: string;
}): void;
export declare function deleteUserIdToken(id: number): boolean;
export declare function updateUserIdToken(token: {
    key: number;
    value: string;
}): void;
export declare function verifyUserIdToken(token: {
    key: number;
    value: string;
}): boolean;
export declare class AuthController {
    private authService;
    private jwtService;
    private userService;
    private prisma;
    private readonly emailConfirmationService;
    private readonly httpService;
    constructor(authService: AuthService, jwtService: JwtService, userService: UserService, prisma: PrismaService, emailConfirmationService: EmailConfirmationService, httpService: HttpService);
    private readonly logger;
    signup(dto: AuthDto, res: Response): Promise<void>;
    createCookie(dto: AuthDto, res: Response): Promise<void>;
    authGet42Login(): void;
    redirectauthGet42Login(req: any, res: any): Promise<void>;
    get_user(): Promise<-1 | {
        image_url: string;
        login: string;
        email: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
    }>;
    get_user_by_id(params: any): Promise<-1 | ({
        friends: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            login: string;
            email: string;
            email_is_ok: boolean;
            hash: string;
            image_url: string;
            gone_through_login: boolean;
            gone_through_register: boolean;
            is_online: boolean;
            auth2f_enabled: boolean;
            is_ongame: boolean;
            victories: number;
            defeats: number;
            nb_of_games: number;
        }[];
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    })>;
    toggleA2f(dto: ChangeDto): Promise<boolean>;
    change_image_url_from_profile(dto: ChangeDto): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }>;
    changeLogin(dto: ChangeDto): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }>;
    get_user_by_login(params: any): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }>;
    loginexists(params: any): Promise<boolean>;
    emailexists(params: any): Promise<boolean>;
    get_friends_by_id(params: any): Promise<-1 | {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }[]>;
    get_all_users(): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }[]>;
    toggleLogin(dto: ChangeDto): Promise<-1 | {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }>;
    toggleLogout(dto: ChangeDto): Promise<-1 | {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }>;
    toggleGoneThroughLoginFalse(dto: ChangeDto): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }>;
    toggleGoneThroughRegisterTrue(id: string): Promise<-1 | {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }>;
    askBackendIfUserWentThroughRegister(params: any): Promise<boolean | -1>;
    askBackendIfUserEnabledA2f(params: any): Promise<boolean>;
}
