import { PrismaService } from 'src/prisma/prisma.service';
import { Info, Perso, allUsersAuthorize, MessageChannelInterface } from './interfaces/chat.interface';
import { Socket } from 'socket.io';
export declare class ChatService {
    private prisma;
    constructor(prisma: PrismaService);
    playerAuthorize: allUsersAuthorize[];
    readonly onlinePlayers: Map<Number, Perso>;
    allInfos: Info[];
    tabSocket: Socket[];
    getAuthorisation(auth: any): boolean;
    getAllMessagesDm(all: any): Promise<{
        user: {
            id: number;
            login: string;
            blockBy: {
                id: number;
                createdAt: Date;
                updatedAt: Date;
                login: string;
                email: string;
                email_is_ok: boolean;
                hash: string;
                image_url: string;
                gone_through_login: boolean;
                gone_through_register: boolean;
                is_online: boolean;
                auth2f_enabled: boolean;
                is_ongame: boolean;
                victories: number;
                defeats: number;
                nb_of_games: number;
            }[];
            blokin: {
                id: number;
                createdAt: Date;
                updatedAt: Date;
                login: string;
                email: string;
                email_is_ok: boolean;
                hash: string;
                image_url: string;
                gone_through_login: boolean;
                gone_through_register: boolean;
                is_online: boolean;
                auth2f_enabled: boolean;
                is_ongame: boolean;
                victories: number;
                defeats: number;
                nb_of_games: number;
            }[];
        }[];
        messages: {
            id: number;
            content: string;
            channelId: number;
            userId: number;
            createdAt: Date;
        }[];
    } & {
        id: number;
        name: string;
        channelOption: import(".prisma/client").$Enums.ChannelOption;
        owner: number;
        Protected: boolean;
        Password: string;
        createdAt: Date;
    }>;
    getChannelInfoWithName(nameChan: string): Promise<{
        user: {
            id: number;
            login: string;
            blockBy: {
                id: number;
                createdAt: Date;
                updatedAt: Date;
                login: string;
                email: string;
                email_is_ok: boolean;
                hash: string;
                image_url: string;
                gone_through_login: boolean;
                gone_through_register: boolean;
                is_online: boolean;
                auth2f_enabled: boolean;
                is_ongame: boolean;
                victories: number;
                defeats: number;
                nb_of_games: number;
            }[];
            blokin: {
                id: number;
                createdAt: Date;
                updatedAt: Date;
                login: string;
                email: string;
                email_is_ok: boolean;
                hash: string;
                image_url: string;
                gone_through_login: boolean;
                gone_through_register: boolean;
                is_online: boolean;
                auth2f_enabled: boolean;
                is_ongame: boolean;
                victories: number;
                defeats: number;
                nb_of_games: number;
            }[];
            inChannel: {
                id: number;
                name: string;
                channelOption: import(".prisma/client").$Enums.ChannelOption;
                owner: number;
                Protected: boolean;
                Password: string;
                createdAt: Date;
            }[];
        }[];
        messages: {
            id: number;
            content: string;
            channelId: number;
            userId: number;
            createdAt: Date;
        }[];
    } & {
        id: number;
        name: string;
        channelOption: import(".prisma/client").$Enums.ChannelOption;
        owner: number;
        Protected: boolean;
        Password: string;
        createdAt: Date;
    }>;
    getHello(): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }[]>;
    getAllUser(): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }[]>;
    getAskInfoForPlayer(id: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }>;
    createChannelGroup(infoChannel: any, idUser: number): Promise<void>;
    createDmChannel(message: any, name_channel: string): Promise<void>;
    PostCreateDmMessage(message: any): Promise<void>;
    PostCreateMessageChannel(messageToChannel: MessageChannelInterface, userId: number): Promise<void>;
    PostDmMessageToDatabase(id: string): Promise<void>;
    blockDmUser(userId: number, notMyUserId: number): Promise<void>;
    createDmChannelBlock(name_channel: string, userId: number, notMyUserId: number): Promise<void>;
    unBlockDmUser(userId: number, notMyUserId: number): Promise<void>;
    getMyUserId(socketId: string): number;
    getMyName(socketId: string): string;
    getSocketIdWithName(name: string): string[];
    getAllPublicChannel(userId: number): Promise<any>;
    getAllPrivateChannel(num: number): Promise<{
        id: number;
        name: string;
        channelOption: import(".prisma/client").$Enums.ChannelOption;
        owner: number;
        Protected: boolean;
        Password: string;
        createdAt: Date;
    }[]>;
    getChannelWithName(name: string): Promise<{
        administrators: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            login: string;
            email: string;
            email_is_ok: boolean;
            hash: string;
            image_url: string;
            gone_through_login: boolean;
            gone_through_register: boolean;
            is_online: boolean;
            auth2f_enabled: boolean;
            is_ongame: boolean;
            victories: number;
            defeats: number;
            nb_of_games: number;
        }[];
    } & {
        id: number;
        name: string;
        channelOption: import(".prisma/client").$Enums.ChannelOption;
        owner: number;
        Protected: boolean;
        Password: string;
        createdAt: Date;
    }>;
    getAllUsers(): Promise<({
        channels: {
            id: number;
            name: string;
            channelOption: import(".prisma/client").$Enums.ChannelOption;
            owner: number;
            Protected: boolean;
            Password: string;
            createdAt: Date;
        }[];
        blockBy: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            login: string;
            email: string;
            email_is_ok: boolean;
            hash: string;
            image_url: string;
            gone_through_login: boolean;
            gone_through_register: boolean;
            is_online: boolean;
            auth2f_enabled: boolean;
            is_ongame: boolean;
            victories: number;
            defeats: number;
            nb_of_games: number;
        }[];
        blokin: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            login: string;
            email: string;
            email_is_ok: boolean;
            hash: string;
            image_url: string;
            gone_through_login: boolean;
            gone_through_register: boolean;
            is_online: boolean;
            auth2f_enabled: boolean;
            is_ongame: boolean;
            victories: number;
            defeats: number;
            nb_of_games: number;
        }[];
        channelAdministrators: {
            id: number;
            name: string;
            channelOption: import(".prisma/client").$Enums.ChannelOption;
            owner: number;
            Protected: boolean;
            Password: string;
            createdAt: Date;
        }[];
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    })[]>;
    getAllUsersClean(): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }[]>;
    getOneUserBlokin(userId: number): Promise<{
        blokin: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            login: string;
            email: string;
            email_is_ok: boolean;
            hash: string;
            image_url: string;
            gone_through_login: boolean;
            gone_through_register: boolean;
            is_online: boolean;
            auth2f_enabled: boolean;
            is_ongame: boolean;
            victories: number;
            defeats: number;
            nb_of_games: number;
        }[];
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }>;
    blockUserWithName(userId: number, name: string): Promise<void>;
    getAllUserBlockFromOneUser(userId: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }[]>;
    unBlockUserWithName(userId: number, name: string): Promise<void>;
    updateChannelPass(userId: number, name: string, pass: string, num: number): Promise<void>;
    getAllUserFromChannel(name: string): Promise<{
        user: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            login: string;
            email: string;
            email_is_ok: boolean;
            hash: string;
            image_url: string;
            gone_through_login: boolean;
            gone_through_register: boolean;
            is_online: boolean;
            auth2f_enabled: boolean;
            is_ongame: boolean;
            victories: number;
            defeats: number;
            nb_of_games: number;
        }[];
        mutes: {
            id: number;
            userId: number;
            channelId: number;
            unmuteAt: Date | null;
        }[];
        inChannel: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            login: string;
            email: string;
            email_is_ok: boolean;
            hash: string;
            image_url: string;
            gone_through_login: boolean;
            gone_through_register: boolean;
            is_online: boolean;
            auth2f_enabled: boolean;
            is_ongame: boolean;
            victories: number;
            defeats: number;
            nb_of_games: number;
        }[];
        ban: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            login: string;
            email: string;
            email_is_ok: boolean;
            hash: string;
            image_url: string;
            gone_through_login: boolean;
            gone_through_register: boolean;
            is_online: boolean;
            auth2f_enabled: boolean;
            is_ongame: boolean;
            victories: number;
            defeats: number;
            nb_of_games: number;
        }[];
        administrators: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            login: string;
            email: string;
            email_is_ok: boolean;
            hash: string;
            image_url: string;
            gone_through_login: boolean;
            gone_through_register: boolean;
            is_online: boolean;
            auth2f_enabled: boolean;
            is_ongame: boolean;
            victories: number;
            defeats: number;
            nb_of_games: number;
        }[];
    } & {
        id: number;
        name: string;
        channelOption: import(".prisma/client").$Enums.ChannelOption;
        owner: number;
        Protected: boolean;
        Password: string;
        createdAt: Date;
    }>;
    addAminToChannel(nameUser: string, nameChan: string): Promise<boolean>;
    removeAminToChannel(nameUser: string, nameChan: string): Promise<boolean>;
    muteToChannel(nameUser: string, nameChan: string, futureDate: Date, myUserId: number): Promise<{
        id: number;
        userId: number;
        channelId: number;
        unmuteAt: Date | null;
    }>;
    UnmuteToChannel(muteUserChannel: any): Promise<void>;
    deleteUserMute(mute: any): Promise<void>;
    getOneUserWithName(name: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        login: string;
        email: string;
        email_is_ok: boolean;
        hash: string;
        image_url: string;
        gone_through_login: boolean;
        gone_through_register: boolean;
        is_online: boolean;
        auth2f_enabled: boolean;
        is_ongame: boolean;
        victories: number;
        defeats: number;
        nb_of_games: number;
    }>;
    banToChannel(nameUser: string, nameChan: string): Promise<boolean>;
    unBanToChannel(nameUser: string, nameChan: string): Promise<boolean>;
    inviteToChannel(nameUser: string, nameChan: string): Promise<boolean>;
    LeaveGiveRight(nameUser: string, nameChan: string): Promise<boolean>;
    addUserToChannel(name: string, userId: number): Promise<void>;
    removeUserToChannel(name: string, userId: number): Promise<void>;
    destroyTheChan(name: string): Promise<void>;
}
